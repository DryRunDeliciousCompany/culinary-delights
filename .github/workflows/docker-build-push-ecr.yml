name: Docker Build & Push for ECR

on:
  push:
    paths:
      - "30_app/**"
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: "30_app"

env:
  WORKING_DIRECTORY: "30_app"
  AWS_REGION: ap-northeast-1
  ECS_SERVICE: tastylog-test-webapp-service
  ECS_CLUSTER: tastylog-test-webapp-cluster
  ECS_TASK_FAMILY: tastylog-test-webapp-template

permissions:
  id-token: write
  contents: read

jobs:
  build-push:
    name: Docker Build & Publish job
    runs-on: ubuntu-latest
    outputs:
      IMAGE_FULL_NAME: ${{ steps.build-img.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-img
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: tastylog-webapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"

  publish:
    name: Publish new container
    runs-on: ubuntu-latest
    needs: [build-push]
    environment: production
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "$ECS_TASK_FAMILY" \
            --region "$AWS_REGION" \
            --query 'taskDefinition' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.WORKING_DIRECTORY }}/task-definition.json
          container-name: webapp
          image: ${{ needs.build-push.outputs.IMAGE_FULL_NAME }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true