name: "[app] Build & Deploy"

on:
  workflow_run:
    workflows:
      - "* Test"
    types: [completed]
  workflow_dispatch:

env:
  WORKING_DIRECTORY: "30_app"
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: tastylog-webapp
  ECS_SERVICE: tastylog-test-webapp-service
  ECS_CLUSTER: tastylog-test-webapp-cluster
  ECS_TASK_FAMILY: tastylog-test-webapp-template
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-push:
    name: Build & Push
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: "30_app"
    outputs:
      IMAGE_FULL_NAME: ${{ steps.build-img.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-img
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build-push]
    environment: production
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "$ECS_TASK_FAMILY" \
            --region "$AWS_REGION" \
            --query 'taskDefinition' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: webapp
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  notify:
    name: "Slack notify"
    needs:
      - build-push
      - publish
    if: always()
    runs-on: "ubuntu-20.04"
    steps:
      # Send slack message
      - name: Send slack message
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ ( github.action_status == 'success' && '#198754' ) || '#bb2d3b' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Publish Finished* \n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK